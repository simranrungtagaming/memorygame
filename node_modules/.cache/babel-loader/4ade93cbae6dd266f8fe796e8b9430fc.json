{"ast":null,"code":"import _toConsumableArray from\"E:/CodingProjects/game/react-redux-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{GENERATE_PAIRS,FLIP_UP_CARD,SHUFFLE_CARDS,CHECK_UNMATCHED_PAIR,markPairAsMatched,MARK_PAIR_AS_MATCHED,flipDownPair,FLIP_DOWN_PAIR,INIT_GAME,shuffleCards,checkUnmatchedPair,checkMatchedPair,generatePairs,SHOW_NUM_CARDS_SELECTION,CHECK_MATCHED_PAIR}from\"./actions\";import shuffle from'shuffle-array';import{generateCardSet,getCard,cardsHaveIdenticalImages}from'./cardFunctions';var initialState={turnNo:1,pairsFound:0,numClicksWithinTurn:0,firstId:undefined,secondId:undefined,gameComplete:false,showNumCardsSelection:false,cards:[]};// The reducer for the memory card array\n// state is an array of cards\nfunction memoryCards(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FLIP_UP_CARD:return state.map(function(card){if(action.id===card.id){return Object.assign({},card,{imageUp:true});}return card;});case MARK_PAIR_AS_MATCHED:return state.map(function(card){if(action.id1===card.id||action.id2===card.id){return Object.assign({},card,{matched:true});}return card;});case FLIP_DOWN_PAIR:return state.map(function(card){if(action.id1===card.id||action.id2===card.id){return Object.assign({},card,{imageUp:false});}return card;});case GENERATE_PAIRS:return generateCardSet(action.numPairs);case SHUFFLE_CARDS:var newCards=_toConsumableArray(state);newCards=shuffle(newCards);return newCards;default:return state;}}// The reducer for the game\n// state is an object with game state and an array of cards\nfunction memoryGame(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case SHOW_NUM_CARDS_SELECTION:return Object.assign({},initialState,{showNumCardsSelection:true});case GENERATE_PAIRS:return Object.assign({},initialState,{cards:memoryCards(initialState.cards,generatePairs(action.numPairs))});case INIT_GAME:var cards=memoryCards(initialState.cards,generatePairs(action.numPairs));return Object.assign({},initialState,{showNumCardsSelection:false,cards:memoryCards(cards,shuffleCards())});case CHECK_UNMATCHED_PAIR:if(state.numClicksWithinTurn===2&&!cardsHaveIdenticalImages(state.firstId,state.secondId,state.cards)){// PAIR DID NOT MATCH\nreturn Object.assign({},state,{numClicksWithinTurn:0,firstId:undefined,secondId:undefined,turnNo:state.turnNo+1,cards:memoryCards(state.cards,flipDownPair(state.firstId,state.secondId))});}return state;case CHECK_MATCHED_PAIR:if(state.numClicksWithinTurn===2&&cardsHaveIdenticalImages(state.firstId,state.secondId,state.cards)){// PAIR MATCHED\nvar pairsFound=state.pairsFound+1;var gameComplete=false;if(pairsFound===state.cards.length/2){gameComplete=true;}return Object.assign({},state,{pairsFound:pairsFound,turnNo:state.turnNo+1,numClicksWithinTurn:0,gameComplete:gameComplete,cards:memoryCards(state.cards,markPairAsMatched(state.firstId,state.secondId))});}return state;case FLIP_UP_CARD:var card=getCard(action.id,state.cards);if(card.imageUp||card.matched){// Selected an already flipped card\n// or a card that has already been matched\nreturn state;}if(state.numClicksWithinTurn===2){// Two cards are already flipped\n// Check for match/unmatch and trigger a new flip\nvar s1=memoryGame(state,checkMatchedPair());var s2=memoryGame(s1,checkUnmatchedPair());return Object.assign({},s2,{firstId:action.id,numClicksWithinTurn:1},{cards:memoryCards(s2.cards,action)});}var firstId=state.firstId;var secondId=state.secondId;if(state.numClicksWithinTurn===0){firstId=action.id;}else{secondId=action.id;}var numClicks=state.numClicksWithinTurn+1;return Object.assign({},state,{firstId:firstId,secondId:secondId,numClicksWithinTurn:numClicks,cards:memoryCards(state.cards,action)});case SHUFFLE_CARDS:return Object.assign({},state,{cards:memoryCards(state.cards,action)});default:return state;}}export default memoryGame;","map":{"version":3,"sources":["E:/CodingProjects/game/react-redux-memory-game-master/src/reducers.js"],"names":["GENERATE_PAIRS","FLIP_UP_CARD","SHUFFLE_CARDS","CHECK_UNMATCHED_PAIR","markPairAsMatched","MARK_PAIR_AS_MATCHED","flipDownPair","FLIP_DOWN_PAIR","INIT_GAME","shuffleCards","checkUnmatchedPair","checkMatchedPair","generatePairs","SHOW_NUM_CARDS_SELECTION","CHECK_MATCHED_PAIR","shuffle","generateCardSet","getCard","cardsHaveIdenticalImages","initialState","turnNo","pairsFound","numClicksWithinTurn","firstId","undefined","secondId","gameComplete","showNumCardsSelection","cards","memoryCards","state","action","type","map","card","id","Object","assign","imageUp","id1","id2","matched","numPairs","newCards","memoryGame","length","s1","s2","numClicks"],"mappings":"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","sourcesContent":["import {\n    GENERATE_PAIRS, FLIP_UP_CARD, SHUFFLE_CARDS, CHECK_UNMATCHED_PAIR, markPairAsMatched,\n    MARK_PAIR_AS_MATCHED, flipDownPair, FLIP_DOWN_PAIR, INIT_GAME,\n    shuffleCards, checkUnmatchedPair, checkMatchedPair, generatePairs, SHOW_NUM_CARDS_SELECTION, CHECK_MATCHED_PAIR\n} from \"./actions\";\nimport shuffle from 'shuffle-array';\nimport { generateCardSet, getCard, cardsHaveIdenticalImages } from './cardFunctions';\n\nconst initialState = {\n    turnNo: 1,\n    pairsFound: 0,\n    numClicksWithinTurn: 0,\n    firstId: undefined,\n    secondId: undefined,\n    gameComplete: false,\n    showNumCardsSelection: false,\n    cards: []\n};\n\n// The reducer for the memory card array\n// state is an array of cards\nfunction memoryCards(state = [], action) {\n    switch (action.type) {\n        case FLIP_UP_CARD:\n            return state.map((card) => {\n                if (action.id === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: true\n                    });\n                }\n                return card;\n            });\n\n        case MARK_PAIR_AS_MATCHED:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        matched: true\n                    })\n                }\n                return card;\n            });\n\n        case FLIP_DOWN_PAIR:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: false\n                    })\n                }\n                return card;\n            });\n\n        case GENERATE_PAIRS:\n            return generateCardSet(action.numPairs);\n\n        case SHUFFLE_CARDS:\n            let newCards = [...state];\n            newCards = shuffle(newCards);\n            return newCards;\n\n        default:\n            return state;\n    }\n}\n\n// The reducer for the game\n// state is an object with game state and an array of cards\nfunction memoryGame(state = initialState, action) {\n    switch (action.type) {\n        case SHOW_NUM_CARDS_SELECTION:\n            return Object.assign({}, initialState, { showNumCardsSelection: true });\n\n        case GENERATE_PAIRS:\n            return Object.assign({}, initialState, { cards: memoryCards(initialState.cards, generatePairs(action.numPairs)) });\n\n        case INIT_GAME:\n            const cards = memoryCards(initialState.cards, generatePairs(action.numPairs));\n            return Object.assign({}, initialState, { showNumCardsSelection: false, cards: memoryCards(cards, shuffleCards()) });\n\n        case CHECK_UNMATCHED_PAIR:\n            if (state.numClicksWithinTurn === 2 && !cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR DID NOT MATCH\n                return Object.assign({}, state, {\n                    numClicksWithinTurn: 0,\n                    firstId: undefined,\n                    secondId: undefined,\n                    turnNo: state.turnNo + 1,\n                    cards: memoryCards(state.cards, flipDownPair(state.firstId, state.secondId))\n                });\n            }\n            return state;\n\n        case CHECK_MATCHED_PAIR:\n            if (state.numClicksWithinTurn === 2 && cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR MATCHED\n                const pairsFound = state.pairsFound + 1;\n                let gameComplete = false;\n                if (pairsFound === state.cards.length / 2) {\n                    gameComplete = true;\n                }\n                return Object.assign({}, state, {\n                    pairsFound,\n                    turnNo: state.turnNo + 1,\n                    numClicksWithinTurn: 0,\n                    gameComplete,\n                    cards: memoryCards(state.cards, markPairAsMatched(state.firstId, state.secondId))\n                });\n            }\n            return state;\n\n        case FLIP_UP_CARD:\n            const card = getCard(action.id, state.cards);\n            if (card.imageUp || card.matched) {\n                // Selected an already flipped card\n                // or a card that has already been matched\n                return state;\n            }\n\n            if (state.numClicksWithinTurn === 2) {\n                // Two cards are already flipped\n                // Check for match/unmatch and trigger a new flip\n                const s1 = memoryGame(state, checkMatchedPair());\n                const s2 = memoryGame(s1, checkUnmatchedPair());\n                return Object.assign({}, s2, { firstId: action.id, numClicksWithinTurn: 1 }, { cards: memoryCards(s2.cards, action) });\n            }\n\n            let firstId = state.firstId;\n            let secondId = state.secondId;\n            if (state.numClicksWithinTurn === 0) {\n                firstId = action.id;\n            } else {\n                secondId = action.id;\n            }\n            const numClicks = state.numClicksWithinTurn + 1;\n\n            return Object.assign({}, state, {\n                firstId,\n                secondId,\n                numClicksWithinTurn: numClicks,\n                cards: memoryCards(state.cards, action)\n            });\n\n        case SHUFFLE_CARDS:\n            return Object.assign({}, state, { cards: memoryCards(state.cards, action) });\n\n        default:\n            return state;\n    }\n}\n\nexport default memoryGame;\n"]},"metadata":{},"sourceType":"module"}