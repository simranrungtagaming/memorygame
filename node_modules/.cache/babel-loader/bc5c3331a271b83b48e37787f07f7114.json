{"ast":null,"code":"import _classCallCheck from\"E:/CodingProjects/game/react-redux-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"E:/CodingProjects/game/react-redux-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"E:/CodingProjects/game/react-redux-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"E:/CodingProjects/game/react-redux-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import'./Game.css';import CardView from'./CardView';import{connect}from'react-redux';import{flipUpCard,checkUnmatchedPair,checkMatchedPair,initGame,showNumCardsSelection}from'./actions';import NumCardsSelectionView from'./NumCardsSelectionView';import GameStatusView from'./GameStatusView';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var timeOut=null;var Game=/*#__PURE__*/function(_Component){_inherits(Game,_Component);var _super=_createSuper(Game);function Game(){_classCallCheck(this,Game);return _super.apply(this,arguments);}_createClass(Game,[{key:\"render\",value:function render(){var cardViews=this.getCardViews();var gameHUD=undefined;if(this.props.showNumCardsSelection){gameHUD=/*#__PURE__*/_jsx(NumCardsSelectionView,{onInitGame:this.props.onInitGame});}else{gameHUD=/*#__PURE__*/_jsx(GameStatusView,{gameComplete:this.props.gameComplete,turnNo:this.props.turnNo,pairsFound:this.props.pairsFound,onShowNumCardsSelection:this.props.onShowNumCardsSelection});}return/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"game-header\",children:/*#__PURE__*/_jsx(\"div\",{className:\"game-title\",children:\"A Memory game in React with Redux\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"game-status\",children:gameHUD}),/*#__PURE__*/_jsx(\"div\",{className:\"card-container\",children:cardViews})]});}},{key:\"getCardViews\",value:function getCardViews(){var _this=this;var cardViews=this.props.cards.map(function(c){return/*#__PURE__*/_jsx(CardView,{id:c.id,image:c.image,imageUp:c.imageUp,matched:c.matched,onClick:_this.props.onCardClicked},c.id);});return cardViews;}}]);return Game;}(Component);var mapStateToProps=function mapStateToProps(state){return{cards:state.cards,turnNo:state.turnNo,gameComplete:state.gameComplete,pairsFound:state.pairsFound,showNumCardsSelection:state.showNumCardsSelection};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onCardClicked:function onCardClicked(id){clearInterval(timeOut);dispatch(flipUpCard(id));dispatch(checkMatchedPair());timeOut=setTimeout(function(){dispatch(checkUnmatchedPair());},4000);},onShowNumCardsSelection:function onShowNumCardsSelection(){dispatch(showNumCardsSelection());},onInitGame:function onInitGame(numPairs){dispatch(initGame(numPairs));}};};var GameView=connect(mapStateToProps,mapDispatchToProps)(Game);export default GameView;","map":{"version":3,"sources":["E:/CodingProjects/game/react-redux-memory-game-master/src/Game.js"],"names":["React","Component","CardView","connect","flipUpCard","checkUnmatchedPair","checkMatchedPair","initGame","showNumCardsSelection","NumCardsSelectionView","GameStatusView","timeOut","Game","cardViews","getCardViews","gameHUD","undefined","props","onInitGame","gameComplete","turnNo","pairsFound","onShowNumCardsSelection","cards","map","c","id","image","imageUp","matched","onCardClicked","mapStateToProps","state","mapDispatchToProps","dispatch","clearInterval","setTimeout","numPairs","GameView"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Game.css';\nimport CardView from './CardView';\nimport { connect } from 'react-redux'\nimport { flipUpCard, checkUnmatchedPair, checkMatchedPair, initGame, showNumCardsSelection } from './actions';\nimport NumCardsSelectionView from './NumCardsSelectionView';\nimport GameStatusView from './GameStatusView';\n\nlet timeOut = null;\n\nclass Game extends Component {\n    render() {\n        const cardViews = this.getCardViews();\n        let gameHUD = undefined;\n\n        if (this.props.showNumCardsSelection) {\n            gameHUD = <NumCardsSelectionView onInitGame={this.props.onInitGame} />;\n        } else {\n            gameHUD = <GameStatusView\n                gameComplete={this.props.gameComplete}\n                turnNo={this.props.turnNo}\n                pairsFound={this.props.pairsFound}\n                onShowNumCardsSelection={this.props.onShowNumCardsSelection}\n            />;\n        }\n\n        return (\n            <div className='game'>\n                <header className='game-header'>\n                    <div className='game-title'>A Memory game in React with Redux</div>\n                </header>\n                <div className='game-status'>\n                    {gameHUD}\n                </div>\n                <div className='card-container'>\n                    {cardViews}\n                </div>\n            </div>\n        );\n    }\n\n    getCardViews() {\n        const cardViews = this.props.cards.map(c =>\n            <CardView key={c.id}\n                id={c.id}\n                image={c.image}\n                imageUp={c.imageUp}\n                matched={c.matched}\n                onClick={this.props.onCardClicked} />\n        );\n        return cardViews;\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        cards: state.cards,\n        turnNo: state.turnNo,\n        gameComplete: state.gameComplete,\n        pairsFound: state.pairsFound,\n        showNumCardsSelection: state.showNumCardsSelection\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCardClicked: id => {\n            clearInterval(timeOut);\n            dispatch(flipUpCard(id));\n            dispatch(checkMatchedPair());\n            timeOut = setTimeout(() => {\n                dispatch(checkUnmatchedPair())\n            }, 4000);\n        },\n        onShowNumCardsSelection: () => {\n            dispatch(showNumCardsSelection());\n        },\n        onInitGame: numPairs => {\n            dispatch(initGame(numPairs));\n        }\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Game)\n\nexport default GameView;\n\n"]},"metadata":{},"sourceType":"module"}