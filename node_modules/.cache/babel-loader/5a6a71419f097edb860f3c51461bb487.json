{"ast":null,"code":"import { GENERATE_PAIRS, FLIP_UP_CARD, SHUFFLE_CARDS, CHECK_UNMATCHED_PAIR, markPairAsMatched, MARK_PAIR_AS_MATCHED, flipDownPair, FLIP_DOWN_PAIR, INIT_GAME, shuffleCards, checkUnmatchedPair, checkMatchedPair, generatePairs, SHOW_NUM_CARDS_SELECTION, CHECK_MATCHED_PAIR } from \"./actions\";\nimport shuffle from 'shuffle-array';\nimport { generateCardSet, getCard, cardsHaveIdenticalImages } from './cardFunctions';\nconst initialState = {\n  turnNo: 1,\n  pairsFound: 0,\n  numClicksWithinTurn: 0,\n  firstId: undefined,\n  secondId: undefined,\n  gameComplete: false,\n  showNumCardsSelection: false,\n  cards: []\n}; // The reducer for the memory card array\n// state is an array of cards\n\nfunction memoryCards(state = [], action) {\n  switch (action.type) {\n    case FLIP_UP_CARD:\n      return state.map(card => {\n        if (action.id === card.id) {\n          return Object.assign({}, card, {\n            imageUp: true\n          });\n        }\n\n        return card;\n      });\n\n    case MARK_PAIR_AS_MATCHED:\n      return state.map(card => {\n        if (action.id1 === card.id || action.id2 === card.id) {\n          return Object.assign({}, card, {\n            matched: true\n          });\n        }\n\n        return card;\n      });\n\n    case FLIP_DOWN_PAIR:\n      return state.map(card => {\n        if (action.id1 === card.id || action.id2 === card.id) {\n          return Object.assign({}, card, {\n            imageUp: false\n          });\n        }\n\n        return card;\n      });\n\n    case GENERATE_PAIRS:\n      return generateCardSet(action.numPairs);\n\n    case SHUFFLE_CARDS:\n      let newCards = [...state];\n      newCards = shuffle(newCards);\n      return newCards;\n\n    default:\n      return state;\n  }\n} // The reducer for the game\n// state is an object with game state and an array of cards\n\n\nfunction memoryGame(state = initialState, action) {\n  switch (action.type) {\n    case SHOW_NUM_CARDS_SELECTION:\n      return Object.assign({}, initialState, {\n        showNumCardsSelection: true\n      });\n\n    case GENERATE_PAIRS:\n      return Object.assign({}, initialState, {\n        cards: memoryCards(initialState.cards, generatePairs(action.numPairs))\n      });\n\n    case INIT_GAME:\n      const cards = memoryCards(initialState.cards, generatePairs(action.numPairs));\n      return Object.assign({}, initialState, {\n        showNumCardsSelection: false,\n        cards: memoryCards(cards, shuffleCards())\n      });\n\n    case CHECK_UNMATCHED_PAIR:\n      if (state.numClicksWithinTurn === 2 && !cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n        // PAIR DID NOT MATCH\n        return Object.assign({}, state, {\n          numClicksWithinTurn: 0,\n          firstId: undefined,\n          secondId: undefined,\n          turnNo: state.turnNo + 1,\n          cards: memoryCards(state.cards, flipDownPair(state.firstId, state.secondId))\n        });\n      }\n\n      return state;\n\n    case CHECK_MATCHED_PAIR:\n      if (state.numClicksWithinTurn === 2 && cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n        // PAIR MATCHED\n        const pairsFound = state.pairsFound + 1;\n        let gameComplete = false;\n\n        if (pairsFound === state.cards.length / 2) {\n          gameComplete = true;\n        }\n\n        return Object.assign({}, state, {\n          pairsFound,\n          turnNo: state.turnNo + 1,\n          numClicksWithinTurn: 0,\n          gameComplete,\n          cards: memoryCards(state.cards, markPairAsMatched(state.firstId, state.secondId))\n        });\n      }\n\n      return state;\n\n    case FLIP_UP_CARD:\n      const card = getCard(action.id, state.cards);\n\n      if (card.imageUp || card.matched) {\n        // Selected an already flipped card\n        // or a card that has already been matched\n        return state;\n      }\n\n      if (state.numClicksWithinTurn === 2) {\n        // Two cards are already flipped\n        // Check for match/unmatch and trigger a new flip\n        const s1 = memoryGame(state, checkMatchedPair());\n        const s2 = memoryGame(s1, checkUnmatchedPair());\n        return Object.assign({}, s2, {\n          firstId: action.id,\n          numClicksWithinTurn: 1\n        }, {\n          cards: memoryCards(s2.cards, action)\n        });\n      }\n\n      let firstId = state.firstId;\n      let secondId = state.secondId;\n\n      if (state.numClicksWithinTurn === 0) {\n        firstId = action.id;\n      } else {\n        secondId = action.id;\n      }\n\n      const numClicks = state.numClicksWithinTurn + 1;\n      return Object.assign({}, state, {\n        firstId,\n        secondId,\n        numClicksWithinTurn: numClicks,\n        cards: memoryCards(state.cards, action)\n      });\n\n    case SHUFFLE_CARDS:\n      return Object.assign({}, state, {\n        cards: memoryCards(state.cards, action)\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default memoryGame;","map":{"version":3,"sources":["E:/CodingProjects/game/react-redux-memory-game-master/src/reducers.js"],"names":["GENERATE_PAIRS","FLIP_UP_CARD","SHUFFLE_CARDS","CHECK_UNMATCHED_PAIR","markPairAsMatched","MARK_PAIR_AS_MATCHED","flipDownPair","FLIP_DOWN_PAIR","INIT_GAME","shuffleCards","checkUnmatchedPair","checkMatchedPair","generatePairs","SHOW_NUM_CARDS_SELECTION","CHECK_MATCHED_PAIR","shuffle","generateCardSet","getCard","cardsHaveIdenticalImages","initialState","turnNo","pairsFound","numClicksWithinTurn","firstId","undefined","secondId","gameComplete","showNumCardsSelection","cards","memoryCards","state","action","type","map","card","id","Object","assign","imageUp","id1","id2","matched","numPairs","newCards","memoryGame","length","s1","s2","numClicks"],"mappings":"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","sourcesContent":["import {\n    GENERATE_PAIRS, FLIP_UP_CARD, SHUFFLE_CARDS, CHECK_UNMATCHED_PAIR, markPairAsMatched,\n    MARK_PAIR_AS_MATCHED, flipDownPair, FLIP_DOWN_PAIR, INIT_GAME,\n    shuffleCards, checkUnmatchedPair, checkMatchedPair, generatePairs, SHOW_NUM_CARDS_SELECTION, CHECK_MATCHED_PAIR\n} from \"./actions\";\nimport shuffle from 'shuffle-array';\nimport { generateCardSet, getCard, cardsHaveIdenticalImages } from './cardFunctions';\n\nconst initialState = {\n    turnNo: 1,\n    pairsFound: 0,\n    numClicksWithinTurn: 0,\n    firstId: undefined,\n    secondId: undefined,\n    gameComplete: false,\n    showNumCardsSelection: false,\n    cards: []\n};\n\n// The reducer for the memory card array\n// state is an array of cards\nfunction memoryCards(state = [], action) {\n    switch (action.type) {\n        case FLIP_UP_CARD:\n            return state.map((card) => {\n                if (action.id === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: true\n                    });\n                }\n                return card;\n            });\n\n        case MARK_PAIR_AS_MATCHED:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        matched: true\n                    })\n                }\n                return card;\n            });\n\n        case FLIP_DOWN_PAIR:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: false\n                    })\n                }\n                return card;\n            });\n\n        case GENERATE_PAIRS:\n            return generateCardSet(action.numPairs);\n\n        case SHUFFLE_CARDS:\n            let newCards = [...state];\n            newCards = shuffle(newCards);\n            return newCards;\n\n        default:\n            return state;\n    }\n}\n\n// The reducer for the game\n// state is an object with game state and an array of cards\nfunction memoryGame(state = initialState, action) {\n    switch (action.type) {\n        case SHOW_NUM_CARDS_SELECTION:\n            return Object.assign({}, initialState, { showNumCardsSelection: true });\n\n        case GENERATE_PAIRS:\n            return Object.assign({}, initialState, { cards: memoryCards(initialState.cards, generatePairs(action.numPairs)) });\n\n        case INIT_GAME:\n            const cards = memoryCards(initialState.cards, generatePairs(action.numPairs));\n            return Object.assign({}, initialState, { showNumCardsSelection: false, cards: memoryCards(cards, shuffleCards()) });\n\n        case CHECK_UNMATCHED_PAIR:\n            if (state.numClicksWithinTurn === 2 && !cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR DID NOT MATCH\n                return Object.assign({}, state, {\n                    numClicksWithinTurn: 0,\n                    firstId: undefined,\n                    secondId: undefined,\n                    turnNo: state.turnNo + 1,\n                    cards: memoryCards(state.cards, flipDownPair(state.firstId, state.secondId))\n                });\n            }\n            return state;\n\n        case CHECK_MATCHED_PAIR:\n            if (state.numClicksWithinTurn === 2 && cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR MATCHED\n                const pairsFound = state.pairsFound + 1;\n                let gameComplete = false;\n                if (pairsFound === state.cards.length / 2) {\n                    gameComplete = true;\n                }\n                return Object.assign({}, state, {\n                    pairsFound,\n                    turnNo: state.turnNo + 1,\n                    numClicksWithinTurn: 0,\n                    gameComplete,\n                    cards: memoryCards(state.cards, markPairAsMatched(state.firstId, state.secondId))\n                });\n            }\n            return state;\n\n        case FLIP_UP_CARD:\n            const card = getCard(action.id, state.cards);\n            if (card.imageUp || card.matched) {\n                // Selected an already flipped card\n                // or a card that has already been matched\n                return state;\n            }\n\n            if (state.numClicksWithinTurn === 2) {\n                // Two cards are already flipped\n                // Check for match/unmatch and trigger a new flip\n                const s1 = memoryGame(state, checkMatchedPair());\n                const s2 = memoryGame(s1, checkUnmatchedPair());\n                return Object.assign({}, s2, { firstId: action.id, numClicksWithinTurn: 1 }, { cards: memoryCards(s2.cards, action) });\n            }\n\n            let firstId = state.firstId;\n            let secondId = state.secondId;\n            if (state.numClicksWithinTurn === 0) {\n                firstId = action.id;\n            } else {\n                secondId = action.id;\n            }\n            const numClicks = state.numClicksWithinTurn + 1;\n\n            return Object.assign({}, state, {\n                firstId,\n                secondId,\n                numClicksWithinTurn: numClicks,\n                cards: memoryCards(state.cards, action)\n            });\n\n        case SHUFFLE_CARDS:\n            return Object.assign({}, state, { cards: memoryCards(state.cards, action) });\n\n        default:\n            return state;\n    }\n}\n\nexport default memoryGame;\n"]},"metadata":{},"sourceType":"module"}